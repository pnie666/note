public class AesTest{

String key ="hjjjjkjkjkjkj";
String Arithhmetic =“AES/CBC/PKCS5Padding”;

String encrypt(String content,String encryptKey){
 //1.构造密钥生成器，指定为AES算法,不区分大小写
 KeyGenerator kgen = KeyGenerator.getInstance("AES");
 //2.根据ecnodeRules规则初始化密钥生成器
 //生成一个128位的随机源,根据传入的字节数组
 kgen.init(128);
 Cipher cipher = Cipher.getInstance(Arithhmetic);
 cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(encryptKey.getBytes(), "AES"));
 byte[] encrypted = cipher.doFinal(content.getBytes("utf-8"));
 return Base64.encodeBase64(encrypted);
 
}

String decrypt(String encrypted){
 //1.构造密钥生成器，指定为AES算法,不区分大小写
 KeyGenerator kgen = KeyGenerator.getInstance("AES");
 //2.根据ecnodeRules规则初始化密钥生成器
 //生成一个128位的随机源,根据传入的字节数组
 kgen.init(128);
 Cipher cipher = Cipher.getInstance(Arithhmetic);
 cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(encryptKey.getBytes(), "AES"));
byte[] bytes Base64.decodeBase64(encrypted);
byte[] encryptbYTES = cipher.doFinal(bytes);
 return new String(encryptbYTES,"utf-8");
}

String getBody(request){
if(request.getContentLength()<=0){
return "";
}
BufferReader =redader=null;
StringBuiber builder = null;
try{
String str;
while((str=resder.readLine())!=-1){
builder.oppend(str);
}
}catch(){

}finally{
reader.close();
}
}
return builder.toString();
